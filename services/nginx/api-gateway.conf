worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    upstream user_service_backend {
        server 127.0.0.1:3000;
        # server user_service:3000;
    }

    upstream order_service_backend {
        server 127.0.0.1:8000;
        # server order_service:8000;
    }

    # =================================================================
    # SERVER BLOCK FOR THE API GATEWAY
    # =================================================================
    server {
        listen 4000;
        server_name localhost;

        default_type application/json;

        # =================================================================
        # INTERNAL LOCATION FOR JWT VALIDATION (AUTH_REQUEST)
        # =================================================================
        # This is an internal endpoint Nginx calls *before* proxying protected requests.
        # It's not directly accessible by clients.
        location = /_auth_check {
            internal; # Mark this location as internal (not directly accessible by clients)

            proxy_pass http://user_service_backend/api/users/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";

            proxy_set_header Authorization $http_authorization;

            proxy_set_header X-User-Id $upstream_http_x_user_id;

        }

        # =================================================================
        # PROXY ROUTES
        # =================================================================

        location ~ ^/api/users/(register|login|(.+)$) {

            proxy_pass http://user_service_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ ^/api/users/[a-f0-9-]{36}$ {
            auth_request /_auth_check;

            proxy_set_header X-User-Id $upstream_x_user_id;

            proxy_pass http://user_service_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /api/orders {
            auth_request /_auth_check;

            proxy_set_header X-User-Id $upstream_x_user_id;

            proxy_pass http://order_service_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            rewrite ^/api/orders/(.*)$ /api/v1/orders/$1 break;
        }

        # =================================================================
        # ERROR HANDLING (for auth_request failures)
        # =================================================================

        error_page 401 = @unauthorized_error;
        error_page 403 = @forbidden_error;

        location @unauthorized_error {
            return 401 '{"message": "Authentication token missing or invalid."}\n';
        }

        location @forbidden_error {
            return 403 '{"message": "Access Denied: Invalid or expired token."}\n';
        }

        location / {
            return 404 '{"message": "Route not found."}\n';
        }
    }
}
